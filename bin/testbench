#!/usr/bin/make -rRf

KUBERNAUT ?= kubernaut
MKOSI ?= testbench-mkosi

HOME ?= ~

#

ifneq ($(filter %.tap %.tap.osi testbench.html run,$(or $(MAKECMDGOALS),run)),)
ifeq ($(CMD),)
$(error Must specify a CMD=)
endif
endif
ifeq ($(wildcard environments/*.mkosi),)
$(error Must define environments in ./environments/*.mkosi)
endif

run: testbench.html
	test -z "$$DISPLAY" || python3 -c 'import webbrowser; webbrowser.open_new("./testbench.html")'
	exit $$(sed -rn 's/.*<!-- exit: ([0-9]+) -->.*/\1/p' -- $<)
.PHONY: run

testbench.html: $(patsubst %.mkosi,%.tap,$(wildcard environments/*.mkosi))
	testbench-tap-matrix $^ > $@

prepare: $(patsubst %.mkosi,%.osi,$(wildcard environments/*.mkosi))
.PHONY: prepare

delete-claims: $(addsuffix .clean,$(wildcard environments/*.knaut))
.PHONY: delete-claims

# Set Make's behavior to do the sane thing
.SECONDARY:
.DELETE_ON_ERROR:
.PHONY: FORCE

# Use kubernaut to manage test clusters
%.knaut.claim:
	echo $(subst /,_,$*)-$${USER}-$$(uuidgen) > $@
%.knaut: %.knaut.claim
	$(KUBERNAUT) claims delete "$$(cat $<)"
	$(KUBERNAUT) claims create --name "$$(cat $<)" --cluster-group main >/dev/null
	cp $(HOME)/.kube/"$$(cat $<)".yaml $@
.PHONY: %.knaut.clean
%.knaut.clean:
	[ ! -e $*.knaut.claim ] || $(KUBERNAUT) claims delete "$$(cat $*.knaut.claim)"
	rm -f -- $*.knaut $*.knaut.claim

# Generic mkosi rules
%.mk: %.mkosi FORCE
	@echo $*.osi: $(sort $(shell find $(wildcard $*.mkosi $*.postinst $*.extra))) > $(@D)/.tmp.$(@F).tmp
	@if cmp -s $(@D)/.tmp.$(@F).tmp $@; then rm -f $(@D)/.tmp.$(@F).tmp; else mv -f $(@D)/.tmp.$(@F).tmp $@; fi
-include $(wildcard environments/*.mk)
%.osi: %.mkosi %.mk | mkosi.cache
	$(MKOSI) --force \
	  --output=$@ \
	  --default=$*.mkosi \
	  $(if $(wildcard $*.postinst),--postinst-script=$*.postinst) \
	  $(if $(wildcard $*.extra),--extra-tree=$*.extra)

%.tap %.tap.osi: %.osi %.knaut FORCE
	rm -f -- $@ $@.osi
	cp -T -- $*.osi $@.osi
	$(MKOSI) --output=$@.osi --default=$*.mkosi --build-sources=$$PWD --use-git-files=no tap-setup sh -c '$(call escape_squotes,$(value CMD))'
	$(MKOSI) --output=$@.osi --default=$*.mkosi qemu -name $@.osi $(if $(DISPLAY),,-nographic)
	$(MKOSI) --output=$@.osi --default=$*.mkosi tap-teardown
#	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) $*.knaut.clean
.PRECIOUS: %.tap.osi

mkosi.cache:
	mkdir mkosi.cache

# I put this as the last line in the file because it confuses Emacs
# syntax highlighting and makes the remainder of the file difficult to
# edit.
escape_squotes = $(subst ','\'',$1)
